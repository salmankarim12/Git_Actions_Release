name: Update Version and Create Release

on:
  push:
    branches:
      - main  # Or the branch you want to trigger this action

jobs:
  update_and_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Read current version
      id: read_version
      run: |
        # Extract the current version from pyproject.toml
        VERSION=$(grep -oP '(?<=version = ")[^"]*' pyproject.toml)
        echo "Current version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Determine increment type
      id: determine_increment
      run: |
        # Get the most recent commit message
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        
        # Default increment type
        INCREMENT_TYPE="patch"

        # Determine increment type based on the commit message
        if echo "$COMMIT_MESSAGE" | grep -q "^breaking:"; then
          INCREMENT_TYPE="major"
        elif echo "$COMMIT_MESSAGE" | grep -q "^feat:"; then
          INCREMENT_TYPE="minor"
        elif echo "$COMMIT_MESSAGE" | grep -q "^fix:"; then
          INCREMENT_TYPE="patch"
        fi

        echo "Increment type: $INCREMENT_TYPE"
        echo "INCREMENT_TYPE=$INCREMENT_TYPE" >> $GITHUB_ENV

    - name: Increment version
      id: increment_version
      run: |
        # Increment the version based on the increment type
        IFS='.' read -r major minor patch <<< "${VERSION}"
        
        if [ "$INCREMENT_TYPE" = "major" ]; then
          new_version="$((major + 1)).0.0"
        elif [ "$INCREMENT_TYPE" = "minor" ]; then
          new_version="${major}.$((minor + 1)).0"
        else
          new_version="${major}.${minor}.$((patch + 1))"
        fi

        echo "New version: $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

    - name: Update pyproject.toml
      run: |
        # Update the version in pyproject.toml
        sed -i "s/version = \"${VERSION}\"/version = \"${NEW_VERSION}\"/" pyproject.toml

    - name: Commit changes
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add pyproject.toml
        git commit -m "Bump version to ${NEW_VERSION}"
        git push origin HEAD:main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Tag Name
      id: generate_tag
      run: echo "RELEASE_TAG=${NEW_VERSION}" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Release ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
